makevector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return (m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
# Variable m is declared uniquely in both functions and are allocated
# separate addresses in memory. In function makeVector() you???ll notice
# variable m is declared immediately and assigned the value NULL using
# the standard assignment operator (<-). However, the ???set??? functions defined
# within the containing makeVector() function require the special assignment
# operator (<???) to update the value of variable m; it is important to remember
# variable m was declared and initialised by makeVector(). Had functions set() and
# setmean() not used the special assignment operator, these functions would have
# allocated memory to store the value and labelled the address as m. The variables
# named m would effectively be isolated and distinct variables.
set <- function(y) {
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(matinv) inverse <<- matinv
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x= matrix(1:6, nrow = 2, ncol = 3))
makeCacheMatrix(x= matrix(1:6, nrow = 2, ncol = 3))
x
x
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <- y
inverse <- NULL
}
get <- function() x
setinverse <- function(matinv) inverse <<- matinv
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x= matrix(1:6, nrow = 2, ncol = 3))
if(x>3)
{y<-10}
else
{y<-3}
x <- 6
if(x>3)
{y<-10}
else
{y<-3}
if(x>3)
{y<-10}
{y<-3}
y
if(x>3)
{y<-10}
{y<-3}
x<-2
y
if(x>3)
{y<-10}
{y<-3}
y
x<-18
if(x>3)
{y<-10}
{y<-3}
y
if(x>3)
{
y<-10
}else{
y<-3
}
x<-18
y
if(x>3)
{y<-10}
else{y<-3}
if(x>3)
{y<-10}
else
{y<-3}
if(x>3)
{y<-10
}
else
{
y<-3}
if(x>3)
{
y<-10
}
else
{
y<-3
}
x<3
x<-3
if(x>3)
{
y<-10
}
else
{
y<-3
}
y
x<-4
y
if(x>3)
{
y<-10
}
else
{
y<-3
}
y
if(x>3)
{
y<-10
}
else
{
y<-3
}
if(x>3)
{
y<-10
}
else
{
y<-3
}
if(x>3)
{
y<-10
}
else
{
y<-3
}
if(x>3)
{
y<-10
}
else
{
y<-3
}
if(x>3)
{
y<-10
}
else{
y<-3
}
if(x>3)
{
y<-10
}else{
y<-3
}
x<-4
if(x>3)
{
y<-10
}else{
y<-3
}
y
X1<-73
X2<-101+36
X2
X3<-X1*X3
X3<-X1*X2
X3
(X3-1)^1/4
(X3-1)^(1/4)
x<-1:20
x
y<-20:1
y
z<-c(x,y)
z
Z<-(1:19,20:1)
Z<-c(1:19,20:1)
z
q<-c(1:19,20:1)
q
tmp<-(4,6,3)
tmp<-c(4,6,3)
tmp
rep(x,3)
rep(tmp,10)
rep(tmp[1],10)
rep(tmp,1=31)
rep(tmp,l=31)
rep(tmp,times = c(11,10,10))
rep(tmp,times = c(10,20,30))
length(tmp)
length(rep(tmp,times = c(10,20,30)))
x <- c(x = 3.1:6)
x
x <- c(x = seq(3.1:6)
)
x
x <- c(x = seq(3,6, by =.01)
)
x
x <- c(seq(3,6, by =.01)
)
x
exp(x)cos(x)
exp(x)*cos(x)
length(x)
(0.1^(seq(3,36,by=3)))
(0.1^(seq(3,36,by=3))*0.2^(seq(1,34,by=3)))
length((0.1^(seq(3,36,by=3))*0.2^(seq(1,34,by=3))))
((2^(1:25)))
((2^(1:25))/(1:25))
int(((2^(1:25))/(1:25)))
round((((2^(1:25))/(1:25))),10)
round((((2^(1:25))/(1:25))),0)
sum((seq(10,100,by=1)^3)+(4*seq(10,100,by=1)^2))
a< 10:100
a<- 10:100
a
sum(a^3+4*a^2)
a<- 1:25
sum((2^a/a)+((3^a)/(a^2))
)
sum((2^a/a)+(3^a/a^2))
sum((2^a)/a+3^a/(a^2))
paste(label ,seq(1,30,by=1))
paste("label" , 1:30)
paste("label" , 1:30, sep = "")
paste("label" , 1:30, sep = NULL)
paste("label" , 1:30, sep = null)
paste("label" , 1:30, sep = " ")
set.seed(50)
random()
set.seed(50)
c(integer,1:5)
set.seed(50)
xVec <- sample(0:999, 250, eplace = F)
xVec <- sample(0:999, 250, replace = F)
xVec
set.seed(50)
xVec <- sample(0:999, 250, replace = T)
yVec <- sample(0:999, 250, replace = T)
yVec
xVec
xVec[2]-yVec[1]
count <- seq(1:205)
count <- seq(1:250)
count <- seq(2:250)
count
count <- seq(1:250)
count
count <- seq(2:251)
count
count <- seq(2:251)
c <-Seq(2:251)
c <- seq (2:251)
c
seq(int 2:2250)
c <- seq (2,250,by = 1)
c
c(yVec[c]-xVec[(c-1)]
)
(yVec[c]-xVec[(c-1)])
sin(yvec[(seq(1,249,by =1 ))]/cos(xVec[seq(2,250,by = 1)]))
sin(yVec[seq(1,249,by =1 )])/cos(xVec[seq(2,250,by = 1)]))
sin(yVec[seq(1,249,by =1 )])/cos(xVec[seq(2,250,by = 1)])
xVec[seq(1,248,by=1)]+2*(xVec[seq(2,249,by=1)])-xVec[seq(3,250,by=1)]
exp(-xVec[seq(2,250,by=1)])/(xVec[1:249]+10)
(yVec[-1]-xVec[-length(xVec)])
yVec
xVec
(yVec[-1]-xVec[-length(xVec)])
c(yVec[1:length(yVec)],yVec >600)
c(yVec[1:250],yVec >600)
subset(yVec[1:250],yVec >600)
index(subset(yVec[1:250],yVec >600))
yVec[yVec>600]
which(yVec>600)
(1:250)[yVec>600]
xVec[which(yVec>600)]
abs(xVec[1:length(xVec)])
abs(xVec[1:length(xVec)]-mean(xVec[1:250]))
abs(((xVec[1:length(xVec)]-mean(xVec[1:250])^1/2)
)
)
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2)
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2))
)
)
))
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2))))
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2)))
(abs(xVec-mean(xVec))^(1/2)
)
abs(xVec[1:length(xVec)])
xVec
xVec[1:250]
sqrt(abs(xVec-mean(xVec)))
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2))))
(abs((xVec[1:length(xVec)]-mean(xVec[1:250]))^(1/2)))
(abs((xVec[1:length(xVec)]-mean(xVec[1:250])))^(1/2)
(abs((xVec[1:length(xVec)]-mean(xVec[1:250])))^(1/2))
)
(abs(xVec[1:length(xVec)]-mean(xVec[1:250])))^(1/2)
(abs(xVec[1:length(xVec)]-mean(xVec[1:250])))^(1/2)- sqrt(abs(xVec-mean(xVec)))
max(yVec)
subset(yVec,yVec < (max(yVec)-200))
subset(yVec,yVec > (max(yVec)-200))
sum(yVec>max(yVec)-200)
sum(subset(yVec,yVec > (max(yVec)-200)))
length(subset(yVec,yVec > (max(yVec)-200)))
yVec>max(yVec)-200
a<-1:6
a%%2
sum(xVec%%2)
sum(xVec%%2)
